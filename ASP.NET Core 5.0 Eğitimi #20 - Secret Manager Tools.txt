Secret Manager Tools Nedir?

- Development sürecinde kritik verilerimizi Secret Manager Tool’un sağlamış olduğu ‘secrets.json’ dosyası sayesinde uygulamadan ayırabilir ve böylece ‘appsettings.json’a erişilse dahi kritik verilerimize erişilemeyeceğinden dolayı güvenli bir şekilde depolamayı sağlamış oluruz. Her ne kadar ‘secrets.json’ dosyasındaki veriler uygulama içerisinde tutulmasada, runtime’da uygulama ayağa kaldırıldığı anda ‘appsettings.json’ dosyası ile ‘secrets.json’ dosyası birleştirilerek ilgili veriler uygulama için erişilebilir olacaktır. Nihayetinde kritik verilerin kötü niyetli kişiler tarafından erişimine kesin bir engel koyulmuş olunacaktır.

- Web uygulamarında develeopment ortamında kullandığımız bazı verilerimizin canlıya deploy edilmesini istemeyebiliriz.

Bu verilerimiz;
- Veritaban bilgilerini barındıran connection string bilgisi,
- Herhangi bir kritik arz eden token değeri,
- Facebook, Google gibi 3rd party authentication işlemleri yapmamızı sağlayan client secret id değerler vs.
olabilir.

Bu veriler developer ortamında kullanılırken, production ortamında kötü niyetli kişilerin uygulama dosyalarına erişim sağladıkları durumlarda elde edemeyecekleri vaziyette bir şekilde ezilmeleri gerekmektedir.

İşte bunun için Secret Manager Tool geliştirilmiştir.

- Web uygulamalarında static olan verileri tekrar tekrar yazmak yerine bir merkezde deoplayarak kullanmayı tercih ediyoruz.
- Asp.NET Core uygulamalarında bu merkez genelde appsettings.json dosyası olmaktadır.
- Bu dosya içerisine yazılan değerler her ne olursa olsun uygulama publish edildiği taktirde çıktıdan erişilebilir vaziyette olacaktır.
- Dolayısıyla bizler static verilerimizi appsettings.json içerisinde tutabiliriz lakin kritik arz eden veriler için burasının pekte ehemmiyetli bir yer olmadığı aşikardır.

Nasıl Kullanılır?

Solution'da sağ tıklayıp Manage User Secrets'a tıkladığımız zaman secrets.json dosyamız açılmış olacaktır.

Projeye çift tıkladığımızda     <UserSecretsId>29c68e42-a27e-4988-ab20-fb05ce2dfa44</UserSecretsId>
olarak bir değer görürüz. Development ortamında bir secrets.json oluşturdum ve ona Id atadım demektir.

secrets.json;

{
  "MailBilgileri": {
    "Kullanici": "mailsever@eto.com",
    "Sifre":  "12345"
  }
}

appsettings.json'a nasıl erişiyorsak aynı şekilde secrets.json'a da erişebiliriz. IConfiguration ya da Options Pattern farketmez.

IConfiguration ile bir arama yaptığımızda appsettings.json'dan önce secrets.json'a bakar eğer burada yoksa appsettings.json'da veriyi getirir.

Aslında ilk olarak bir sonraki derste görülecek olan Environment'a bakar -> secrets.json -> appsettings.json'a bakılır.
İkisinde de aynı değer varsa ilk hangisi tetikleniyorsa ondaki değer getirilir.

HomeController.cs'de verileri elde edelim;

namespace secretManagerExample.Controllers
{
    [Route("api/[controller]")]
    [ApiController]

    public class HomeController : ControllerBase
    {
        readonly IConfiguration configuration;
        public HomeController (IConfiguration configuration)
        {
            this.configuration = configuration;
        }
        public void Index()
        {
            var kullanici = configuration["MailBilgileri:Kullanici"];
            var sifre = configuration["MailBilgileri:Kullanici"];
        }
    }
}

Debug modunda ilgili verilerin geldiğini görürüz.

---

Secret Manager Verileri Nerede Depolar?

%Appdata% -> Roaming -> Microsoft -> UserSecrets klasörünün altında development ortamında kullanılan bütün secret manager dosyalarını görebiliriz.

29c68e42-a27e-4988-ab20-fb05ce2dfa44 Id ismiyle aynı klasörün içerisinde secrets.json'u görebiliriz.

Projenin içinde tutulmaz. 

Projeyi publish edip,

...\secretManagerExample\secretManagerExample\bin\Release\net5.0\publish'e bakarsak ilgili klasörün altında secrets.json'a dair herhangi bir veri bulunmadığımı görürüz.

---

Production'da Hassas/Kritik Veriler Nasıl Girilecek?

- Environment variables yardımı ile. (bir sonraki derste)

---

SqlConnectionStringBuilder Sınıfının Kullanımı

- Bu sınıf üzerinden dağınık konfigürasyonel değerleri hızı bir şekilde toplayabiliriz.

Diyelim ki SQL Server'da kullacağımız bilgileri,

appsettings.json ve;

{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    "SQL" : "Server=123.123.123.123;Database=ExampleDB;"
  }
}

secrets.json'da;

{
  "MailBilgileri": {
    "Kullanici": "mailsever@eto.com",
    "Sifre": "12345"
  },
  "SQL": {
    "Sifre": "12345",
    "KullaniciAdi": "cagatay33"
  }
}

parçalı olarak tuttuk. Bu ikisini de farklı alanlardan IConfiguration ile almaya çalışmaktansa hızlı bir şekilde toplamak için 
SqlConnectionStringBuilder sınıfını kullanabiliriz.

namespace secretManagerExample.Controllers
{
    [Route("api/[controller]")]
    [ApiController]

    public class HomeController : ControllerBase
    {
        readonly IConfiguration configuration;
        public HomeController (IConfiguration configuration)
        {
            this.configuration = configuration;
        }
        public void Index()
        {
            var kullanici = configuration["MailBilgileri:Kullanici"];
            var sifre = configuration["MailBilgileri:Kullanici"];

			//SQL Bağlantı kısmı;
            var connection = configuration.GetConnectionString("SQL");
            SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder(connection);
            builder.UserID = configuration["SQL:KullaniciAdi"];
            builder.Password = configuration["SQL:Sifre"];

            var x = builder.ConnectionString;
        }
    }
}

debug modunda x'e bakarsak;

"Data Source=123.123.123.123;Initial Catalog=ExampleDB;User ID=cagatay33;Password=12345"

değerinin bütünleşip geldiğini görürüz.

